{
  "metadata": {
    "name": "New JSNB",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "\n\nvar unitVel = 100; \nvar ff = 0;\nvar timeDelay = 1;\nvar canvas = document.getElementById('firstCanvas');\ncanvas.width = window.innerWidth;\ncanvas.height = window.innerHeight;\n// canvas.height = 1000 * devicePixelRatio;\nconsole.log(canvas.height, canvas.width);\nvar c = canvas.getContext('2d');\nc.strokeStyle = 'rgb(200, 0,0)';\nc.lineWidth= 1;\nvar scaleFactor = Math.min(canvas.height/968, canvas.width/1260);\nvar std_dt = 0.005;\nvar count = 0;\nvar x=-7.13;\nvar y=-7.11;\nvar z=25.41;\nvar b = 0;\nvar g = 0;\nvar r = 0;\nvar dt = 0.005;\na = Promise.resolve();\n\n\n\n\n\n\n\n//Functions\n\n\nconst clearScreen = () => {\n    c.clearRect(0, 0, canvas.width, canvas.height);\n}\nconst ffBut = () => {\n    dt = std_dt/5;\n\n    ff = 1;\n}\nconst reloadScreen = () => {\n    location.reload();\n}\nconst speedUp = () => {\n    // timeDelay = 1;\n    dt = std_dt*1.5;\n}\nconst slowDown = () => {\n    // timeDelay = 100;\n    dt = std_dt / 5;\n}\nconst normalSpeed = () => {\n    // timeDelay = 10;\n    dt = std_dt;\n}\n\nvar normalizeX = (x) =>{\n    return 0;\n}\nvar normalizeY = (y) =>{\n    return 0;\n}\n\nc.beginPath();\n\n\nconst command = (func, x, y, k) => {\n    return new Promise((resolve) => {\n        setTimeout(() => {\n            func(x, y, k);\n            resolve();\n        }, 1000);\n    });\n};\n\n\n\n\nc.moveTo(window.innerWidth/2,window.innerHeight/2);\n\n\nvar prev_pos = {x:normalizeX(y), y:normalizeY(z)};\nconst move = (x, y, col) => {\n    if(count=1){\n        c.beginPath();\n        c.strokeStyle = `rgb(${col.r}, 0, ${col.b})`;\n        count =0;\n    }\n    else{\n        count = 1;\n    }\n    c.moveTo(prev_pos.x, prev_pos.y);\n    \n    c.lineTo(x, y);\n    c.stroke();\n    c.moveTo(x, y);\n    prev_pos.x = x;\n    prev_pos.y = y;\n    \n}\n\n\n\n\n\n\n// c.moveTo(normalizeX(y), normalizeY(z));\n\nvar dxdt=(x,y,z) => {return 0;}\nvar dydt=(x,y,z)=> {return 0;}\nvar dzdt=(x,y,z) => {return 0;}\n\nconst proceed = (k) => {\nfor(let i=0; i<k; i++){\n    \n    a = a.then(\n            () => {\n                \n                command(move, normalizeX(x), normalizeY(z), {r:r, g:g, b:b});\n            }\n        )\n        .then(\n            () => {\n                \n                return new Promise(\n                    (resolve) => {\n                        var dfxdt = dxdt(x, y, z);\n                        var dfydt = dydt(x, y, z);\n                        var dfzdt = dzdt(x, y, z);\n                        let vel = ((dfxdt**2 + dfydt**2 + dfzdt**2)**0.5)/unitVel;\n                        r = Math.round(240*vel);\n                        b = Math.round(240* (1.5-vel));\n                        c.strokeStyle = `rgb(${r}, 0, ${b})`;\n                        \n\n                        x = x+(dfxdt*dt);\n                        y = y+(dfydt*dt);\n                        z = z+(dfzdt*dt);\n                    if(ff == 1){\n                        resolve();\n                    }\n                    else{\n                    console.log(timeDelay);\n                    setTimeout(resolve, timeDelay);\n                    }\n                    \n                    }   \n                );\n            }\n        );\n    \n}\n}\n// proceed();\nconst lorentz = () =>{\n    unitVel = 100;\n    x=-7.13;\n    y=-7.11;\n    z=25.41;\n    std_dt = 0.005;\n    dt = std_dt;\n    normalizeX = (x) =>{\n        return (window.innerWidth/2 + 30*scaleFactor*x);\n    }\n    normalizeY = (y) =>{\n        return (window.innerHeight/2 - 18*scaleFactor*(y-30*scaleFactor));\n    }\n    prev_pos = {x:normalizeX(y), y:normalizeY(z)};\n    dxdt=(x,y,z) => {return 10*(y-x);}\n    dydt=(x,y,z)=> {return x*(28-z)-y;}\n    dzdt=(x,y,z) => {return x*y-8*z/3;}\n    proceed(Math.round(600000*(scaleFactor**0.2)));\n}\nconst chen = () => {\n    x=1.960;\n    y=2.04;\n    z=12.51;\n    std_dt = 0.0005;\n    dt = std_dt;\n    unitVel = 1500;\n    \n    \n    normalizeX = (x) =>{\n        return (window.innerWidth/2 + 20*scaleFactor*x);\n    }\n    normalizeY = (y) =>{\n        return (window.innerHeight/2 - 20*scaleFactor*(y-20*scaleFactor));\n    }\n    prev_pos = {x:normalizeX(y), y:normalizeY(z)};\n    dxdt=(x,y,z) => {return 400*(y-x);}\n    dydt=(x,y,z)=> {return -120*x-10*(x*z) +280*y ;}\n    dzdt=(x,y,z) => {return 10*x*y  - 30*z;}\n    proceed(Math.round(600000*(scaleFactor**0.2)));\n\n}",
      "status": "[1]<br><span style=\"font-size:8px\">1ms<span></span></span>",
      "output": "",
      "type": "html"
    },
    {
      "code": "\n\nvar unitVel = 100; \nvar ff = 0;\nvar timeDelay = 1;\nvar canvas = document.getElementById('firstCanvas');\ncanvas.width = window.innerWidth;\ncanvas.height = window.innerHeight;\n// canvas.height = 1000 * devicePixelRatio;\nconsole.log(canvas.height, canvas.width);\nvar c = canvas.getContext('2d');\nc.strokeStyle = 'rgb(200, 0,0)';\nc.lineWidth= 1;\nvar scaleFactor = Math.min(canvas.height/968, canvas.width/1260);\nvar std_dt = 0.005;\nvar count = 0;\nvar x=-7.13;\nvar y=-7.11;\nvar z=25.41;\nvar b = 0;\nvar g = 0;\nvar r = 0;\nvar dt = 0.005;\na = Promise.resolve();\n\n\n\n\n\n\n\n//Functions\n\n\nconst clearScreen = () => {\n    c.clearRect(0, 0, canvas.width, canvas.height);\n}\nconst ffBut = () => {\n    dt = std_dt/5;\n\n    ff = 1;\n}\nconst reloadScreen = () => {\n    location.reload();\n}\nconst speedUp = () => {\n    // timeDelay = 1;\n    dt = std_dt*1.5;\n}\nconst slowDown = () => {\n    // timeDelay = 100;\n    dt = std_dt / 5;\n}\nconst normalSpeed = () => {\n    // timeDelay = 10;\n    dt = std_dt;\n}\n\nvar normalizeX = (x) =>{\n    return 0;\n}\nvar normalizeY = (y) =>{\n    return 0;\n}\n\nc.beginPath();\n\n\nconst command = (func, x, y, k) => {\n    return new Promise((resolve) => {\n        setTimeout(() => {\n            func(x, y, k);\n            resolve();\n        }, 1000);\n    });\n};\n\n\n\n\nc.moveTo(window.innerWidth/2,window.innerHeight/2);\n\n\nvar prev_pos = {x:normalizeX(y), y:normalizeY(z)};\nconst move = (x, y, col) => {\n    if(count=1){\n        c.beginPath();\n        c.strokeStyle = `rgb(${col.r}, 0, ${col.b})`;\n        count =0;\n    }\n    else{\n        count = 1;\n    }\n    c.moveTo(prev_pos.x, prev_pos.y);\n    \n    c.lineTo(x, y);\n    c.stroke();\n    c.moveTo(x, y);\n    prev_pos.x = x;\n    prev_pos.y = y;\n    \n}\n\n\n\n\n\n\n// c.moveTo(normalizeX(y), normalizeY(z));\n\nvar dxdt=(x,y,z) => {return 0;}\nvar dydt=(x,y,z)=> {return 0;}\nvar dzdt=(x,y,z) => {return 0;}\n\nconst proceed = (k) => {\nfor(let i=0; i<k; i++){\n    \n    a = a.then(\n            () => {\n                \n                command(move, normalizeX(x), normalizeY(z), {r:r, g:g, b:b});\n            }\n        )\n        .then(\n            () => {\n                \n                return new Promise(\n                    (resolve) => {\n                        var dfxdt = dxdt(x, y, z);\n                        var dfydt = dydt(x, y, z);\n                        var dfzdt = dzdt(x, y, z);\n                        let vel = ((dfxdt**2 + dfydt**2 + dfzdt**2)**0.5)/unitVel;\n                        r = Math.round(240*vel);\n                        b = Math.round(240* (1.5-vel));\n                        c.strokeStyle = `rgb(${r}, 0, ${b})`;\n                        \n\n                        x = x+(dfxdt*dt);\n                        y = y+(dfydt*dt);\n                        z = z+(dfzdt*dt);\n                    if(ff == 1){\n                        resolve();\n                    }\n                    else{\n                    console.log(timeDelay);\n                    setTimeout(resolve, timeDelay);\n                    }\n                    \n                    }   \n                );\n            }\n        );\n    \n}\n}\n// proceed();\nconst lorentz = () =>{\n    unitVel = 100;\n    x=-7.13;\n    y=-7.11;\n    z=25.41;\n    std_dt = 0.005;\n    dt = std_dt;\n    normalizeX = (x) =>{\n        return (window.innerWidth/2 + 30*scaleFactor*x);\n    }\n    normalizeY = (y) =>{\n        return (window.innerHeight/2 - 18*scaleFactor*(y-30*scaleFactor));\n    }\n    prev_pos = {x:normalizeX(y), y:normalizeY(z)};\n    dxdt=(x,y,z) => {return 10*(y-x);}\n    dydt=(x,y,z)=> {return x*(28-z)-y;}\n    dzdt=(x,y,z) => {return x*y-8*z/3;}\n    proceed(Math.round(600000*(scaleFactor**0.2)));\n}\nconst chen = () => {\n    x=1.960;\n    y=2.04;\n    z=12.51;\n    std_dt = 0.0005;\n    dt = std_dt;\n    unitVel = 1500;\n    \n    \n    normalizeX = (x) =>{\n        return (window.innerWidth/2 + 20*scaleFactor*x);\n    }\n    normalizeY = (y) =>{\n        return (window.innerHeight/2 - 20*scaleFactor*(y-20*scaleFactor));\n    }\n    prev_pos = {x:normalizeX(y), y:normalizeY(z)};\n    dxdt=(x,y,z) => {return 400*(y-x);}\n    dydt=(x,y,z)=> {return -120*x-10*(x*z) +280*y ;}\n    dzdt=(x,y,z) => {return 10*x*y  - 30*z;}\n    proceed(Math.round(600000*(scaleFactor**0.2)));\n\n}",
      "status": "",
      "output": "",
      "type": "code"
    }
  ],
  "source": "https://github.com/gopi-suvanam/jsnb",
  "run_on_load": false
}